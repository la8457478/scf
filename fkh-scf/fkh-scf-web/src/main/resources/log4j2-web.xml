<?xml version="1.0" encoding="UTF-8"?>
<!-- status="OFF", 可以去掉, 它的含义为是否记录log4j2本身的event信息, 默认是OFF -->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<Configuration status="OFF" monitorInterval="30">
    <Properties>
        <!-- （*必须,各应用需要修改） 部署应用的名称,命名规则 :全部小写字母, 中短横线, 数字,与微服务命名,disconf中命名一致 -->
        <property name="APP_NAME">fkh-scf-web</property>
        <!--<property name="LOG_DEFAULT_FOLDER">/usr/logs</property>>-->
        <!-- （各应用需要修改）日志文件本地存放目录路径 建议各个环境跟生产环境统一起来,方便维护 -->
        <property name="LOG_BASE_FOLDER">/mnt/syslogs/v5/${APP_NAME}</property>
        <!-- 日志文件名称的前缀部分, 以下为建议值 -->
        <property name="LOG_FILENAME_PREFIX">${APP_NAME}</property>
        <property name="LOG_OUTPUT_REF">FILE</property>
        <property name="PARENT_PACKAGE_NAME">com.fkhwl</property>
        <property name="LOG_PROJECT_LEVEL">ERROR</property>
        <property name="LOG_ROOT_LEVEL">ERROR</property>
        <!-- 日志文件最小切割单位 值不做强制要求, 建议100MB -->
        <property name="EVERY_FILE_SIZE">100MB</property>
        <!-- <property name="DELETE_FILE_AGE">${DELETE_FILE_AGE_VALUE}</property> -->
        <!-- *必须并强制遵守 日志文件的编码 -->
        <property name="LOG_CHARSET">UTF-8</property>
        <Property name="LOG_EXCEPTION_CONVERSION_WORD">%xwEx</Property>
        <Property name="LOG_LEVEL_PATTERN">[%5p]</Property>
        <!--@formatter:off-->
        <Property name="CONSOLE_LOG_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{${LOG_LEVEL_PATTERN}} [%traceId] %clr{-}{faint} %clr{[%15.15t]}{faint} %clr{%c{1.}}{cyan} %clr{::}{faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD}</Property>
        <Property name="FILE_LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN} [%traceId] - [%15.15t] %c{1.} :: %m%n${LOG_EXCEPTION_CONVERSION_WORD}</Property>
        <!--@formatter:on-->
    </Properties>

    <Appenders>
        <!-- 用来控制台输出 -->
        <Console name="CONSOLE" target="SYSTEM_OUT">
            <PatternLayout charset="${LOG_CHARSET}">
                <MarkerPatternSelector defaultPattern="${CONSOLE_LOG_PATTERN}">
                    <PatternMatch key="banner" pattern="%m%n"/>
                    <PatternMatch key="properties" pattern="%m%n"/>
                </MarkerPatternSelector>
            </PatternLayout>
        </Console>

        <!-- 将日志输出到指定位置的文件中 -->
        <RollingRandomAccessFile name="FILE"
                                 filePattern="${LOG_BASE_FOLDER}/%d{yyyy-MM-dd}/all-%d{yyyyMMdd-HH}.%i.log.gz"
                                 fileName="${LOG_BASE_FOLDER}/all.log"
                                 immediateFlush="false">
            <!-- 日志输出格式 -->
            <PatternLayout charset="${LOG_CHARSET}">
                <MarkerPatternSelector defaultPattern="${FILE_LOG_PATTERN}">
                    <PatternMatch key="banner" pattern="%m%n"/>
                    <PatternMatch key="properties" pattern="%m%n"/>
                </MarkerPatternSelector>
            </PatternLayout>
            <!-- interval单位为filePattern最后一个单位, 此处为24小时, modulate若为true,
                则日志时间将以0点为边界进行偏移计算, 由于加了.gz策略, 所以此处意思为每隔24小时, 便会新生成一个
                log4j2的压缩文件, 当每个文件超过 EVERY_FILE_SIZE 时, 也会新生成一个log4j2的压缩文件 -->
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="24"/>
                <SizeBaseDTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
            </Policies>
            <Filters>
                <!-- 只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）这里输出 debug 是为了在线上修改日志等级时可以输出 debug -->
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>

            <!-- 最多备份30天以内||日志文件大小达到100GB的日志||文件数量超过十个
            此处为策略限制, Delete中可以按自己需要用正则表达式编写 -->
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG_BASE_FOLDER}" maxDepth="2">
                    <IfFileName glob="*/all-*.log.gz"/>
                    <IfLastModified age="24H"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
        <!--error级别日志输出-->
        <RollingRandomAccessFile name="FILE_ERROR"
                                 filePattern="${LOG_BASE_FOLDER}/%d{yyyy-MM-dd}/error-%d{yyyyMMdd-HH}.%i.log.gz"
                                 fileName="${LOG_BASE_FOLDER}/error.log"
                                 immediateFlush="false">
            <PatternLayout charset="${LOG_CHARSET}">
                <MarkerPatternSelector defaultPattern="${FILE_LOG_PATTERN}">
                    <PatternMatch key="banner" pattern="%m%n"/>
                    <PatternMatch key="properties" pattern="%m%n"/>
                </MarkerPatternSelector>
            </PatternLayout>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="24"/>
                <SizeBaseDTriggeringPolicy size="20MB"/>
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG_BASE_FOLDER}" maxDepth="2">
                    <IfFileName glob="*/error-*.log.gz"/>
                    <IfLastModified age="24H"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
    </Appenders>

    <Loggers>
        <Logger name="com.ulisesbocchio.jasyptspringboot" level="INFO"/>
        <!-- Spring -->
        <Logger name="org.springframework" level="WARN"/>
        <Logger name="org.springframework.context.support" level="WARN"/>
        <Logger name="springfox.documentation" level="WARN"/>
        <Logger name="io.swagger.models.parameters.AbstractSerializableParameter" level="ERROR"/>
        <Logger name="org.springframework.beans.factory.support.DefaultListableBeanFactory" level="ERROR"/>
        <Logger name="org.thymeleaf" level="WARN"/>
        <Logger name="org.springframework.cloud.gateway.filter.LoadBalancerClientFilter" level="trace"/>
        <Logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" level="TRACE"/>
        <!-- mybatis loggers -->
        <Logger name="com.ibatis" level="DEBUG"/>
        <Logger name="com.mybatis" level="DEBUG"/>
        <!-- 注册到 Spring boot admin -->
        <Logger name="de.codecentric.boot.admin.client.registration.ApplicationRegistrator" level="ERROR"/>
        <!-- sql loggers -->
        <Logger name="java.sql.Connection" level="DEBUG"/>
        <Logger name="java.sql.Statement" level="DEBUG"/>
        <Logger name="java.sql.PreparedStatement" level="DEBUG"/>
        <Logger name="java.sql.ResultSet" level="DEBUG"/>
        <!-- General Apache libraries -->
        <Logger name="org.apache" level="WARN"/>
        <Logger name="io.netty" level="INFO"/>
        <!-- dubbo-->
        <Logger name="com.alibaba.dubbo.remoting.transport.DecodeHandler" level="WARN"/>
        <Logger name="com.alibaba.dubbo.monitor.dubbo.DubboMonitor" level="OFF"/>
        <Logger name="com.alibaba.dubbo.remoting.exchange.support.header.HeartbeatHandler" level="WARN"/>
        <Logger name="com.alibaba.dubbo.remoting.exchange.support.header.HeartBeatTask" level="WARN"/>
        <Logger name="com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry" level="WARN"/>
        <Logger name="com.alibaba.dubbo.config.AbstractConfig" level="ERROR"/>
        <!-- nacos-->
        <Logger name="com.alibaba.nacos.client" level="WARN"/>
        <Logger name="druid.sql" level="WARN"/>
        <Logger name="io.undertow.request.security" level="WARN"/>
        <Logger name="org.xnio.nio" level="WARN"/>
        <Logger name="org.mongodb.driver" level="INFO"/>
        <Logger name="org.hibernate.validator.internal" level="WARN"/>
        <Logger name="com.baomidou.mybatisplus.core.MybatisConfiguration" level="INFO"/>
        <Logger name="reactor.util" level="INFO"/>
        <Logger name="io.netty.util" level="INFO"/>
        <Logger name="io.netty.buffer" level="INFO"/>
        <Logger name="com.zaxxer" level="INFO"/>
        <!-- redis -->
        <Logger name="io.lettuce" level="INFO"/>
        <!-- 对包进行更详细的配置 -->
        <!-- additivity表示是否追加,防止重复,因为root已经接收过一次了 -->
        <Logger name="${PARENT_PACKAGE_NAME}" level="${LOG_PROJECT_LEVEL}" additivity="false">
            <AppenderRef ref="${LOG_OUTPUT_REF}"/>
            <AppenderRef ref="FILE_ERROR"/>
        </Logger>
        <Root level="${LOG_ROOT_LEVEL}">
            <AppenderRef ref="${LOG_OUTPUT_REF}"/>
            <AppenderRef ref="FILE_ERROR"/>
        </Root>
    </Loggers>
</Configuration>
